@use "sass:math";

button.like-button {
  background: none;
  border: none;

  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  position: absolute;
  bottom: 2rem;
  right: 2rem;
  padding: 0.75rem;
  z-index: 2;

  svg {
    width: 2.5rem;
    height: 2.5rem;
    filter: drop-shadow(0 0 0.5rem #0008);
    transition: 0.3s ease-in-out;
  }

  &:hover {
    svg {
      filter: drop-shadow(0 0 0.5rem crimson);
    }
  }

  &:active {
    svg {
      color: crimson;
    }
  }

  transition: 0.1s ease-in-out;
  transform-origin: center;

  &:hover {
    scale: 1.5;
  }

  &:active {
    scale: 0.75;
  }

  animation: wobble-3s 3s ease-in-out infinite alternate;

  &:hover {
    animation: none;
  }

  &::after {
    content: "LIKE";
    position: absolute;
    bottom: 100%;
    width: 100%;
    left: 0;
    pointer-events: none;
    text-align: center;
  }

  @keyframes wobble-3s {
    $wobble-duration: 3s;
    $wobble-time: 300ms;
    $wobble-delay: $wobble-duration - $wobble-time;
    $wobble-count: 3;
    $wobble-amount-translate: 0.25rem;
    $wobble-amount-rotate: 5deg;

    $wobble-delay-percent: math.div($wobble-delay, $wobble-duration) * 100%;
    $wobble-time-percent: math.div($wobble-time, $wobble-duration) * 100%;
    $wobble-step-percent: math.div($wobble-time-percent, $wobble-count + 2);

    0%,
    100%,
    #{$wobble-delay-percent} {
      scale: 1;
      translate: 0 0;
      rotate: 0;
      color: white;
    }

    @for $i from 0 through $wobble-count {
      $start: $wobble-delay-percent + (($i + 1) * $wobble-step-percent);
      $end: $start + $wobble-step-percent;

      $odd: $i % 2 == 1;
      $oddToSign: if($odd, -1, 1);

      $translate: $oddToSign * $wobble-amount-translate;
      $rotate: $oddToSign * $wobble-amount-rotate;

      #{$start} {
        scale: 1.2;
        translate: $translate 0;
        rotate: $rotate;
        color: hotpink;
      }
    }
  }
}
